{"componentChunkName":"component---src-templates-post-js","path":"/posts/solving-interview-questions:-palindromes","result":{"data":{"markdownRemark":{"html":"<p>Continuing on with the blog series for solving interview questions, I figured I'd touch on a topic that's very common to see on technical interviews. The Palindrome.</p>\n<p>A palindrome is a string that when reversed is equal to the initial un-reversed string. Palindromes are a fun coding problem and will more than likely show up in some form or another during your job search.</p>\n<p>So a question you might come across could be something along these lines:</p>\n<p>\"Given a string, determine if the string is a palindrome\"</p>\n<pre><code>const isPalindrome=(string)=>{\n    //return true if string is a\n    //palindrome and false if not\n}\n</code></pre>\n<p>This is a very barebones question, we're just reversing the string we are given, comparing it with the initial string and returning true or false, simple right?</p>\n<p>Let's try it out.</p>\n<h2>For Loop</h2>\n<pre><code>const isPalindrome=(string)=>{\n    let reverse = ''\n    for(let i = string.length-1;i>=0;i--){\n        reverse+=string[i]\n    }\n    return(string===reverse)\n}\n</code></pre>\n<p>So here we're creating a new empty string variable called reverse, iterating through the given string in reverse and appending each char to reverse. This gives us a completely reversed string which we then compare to the given string.</p>\n<p>This method is fine but there's a built in JavaScript function that would make this code a bit cleaner.</p>\n<h2>Array</h2>\n<p>So instead of looping through the given string and building the reversed string, we can instead try something like this:</p>\n<pre><code>const isPalindrome=(string)=>{\n    const reverse = string.split('').reverse().join('')\n    return (string===reverse)\n}\n</code></pre>\n<p>In this function, we're converting the given string into an array of each char. We're then calling array.reverse() which is a built in JavaScript Array function which completely reverses the contents of the array. We're then calling array.join('') which then puts the array back into a string leaving us with the reversed string to which we then compare to the given string.</p>\n<p>This way of solving the problem looks significantly cleaner than the For Loop solution.</p>\n<h2>Edge Cases</h2>\n<p>Now these solutions will work fine for single word palindromes like 'racecar' but not for sentances or multi-word strings like 'taco cat'. We also want to account for the possibility that a string with capital letters can be checked, so we'll have to add some code to account for these cases.</p>\n<pre><code>const isPalindrome=(string)=>{\n    const cleanString = string.replace(/[^\\w]/g,'').toLowerCase()\n    const reverse = cleanString.split('').reverse().join('')\n    return (cleanString===reverse)\n}\n</code></pre>\n<p>So to account for the cases stated above, I added another line which declares cleanString as string without any special chars and lowercase. I'm using .replace() and passing the regex <code>/[^\\w]/g</code>, and an empty string. This will remove any character that isn't alphanumeric. We're then just calling toLowerCase() on the result of that replace() call.</p>\n<p>I then changed reverse to split cleanString rather than string into the array for reversal. From there we're just comparing cleanString with reverse, giving us our answer.</p>\n<p>We have a pretty decent solution here</p>","frontmatter":{"title":"Solving Interview Questions: Palindromes","date":"2020-11-01"}}},"pageContext":{"id":"39168df5-391c-5fd5-8f57-888511691f07"}},"staticQueryHashes":[]}